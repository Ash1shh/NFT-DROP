import React, { useState, useEffect } from "react";
import { useAddress, useDisconnect, useMetamask, useContract } from "@thirdweb-dev/react";
import { GetServerSideProps } from 'next'
import { sanityClient, urlFor } from "../../sanity"
import { Collection } from '../../typings'
import Link from "next/link";
import { BigNumber } from "ethers"
import toast, { Toaster } from 'react-hot-toast';
import Head from "next/head";


interface Props {
    collections: Collection
}
function searching({ collections }: Props) {
    const [claimedSupply, setClaimedSupply] = useState<number>(0);
    const [totalSupply, setTotalSupply] = useState<BigNumber>()
    const [loading, setLoading] = useState<boolean>(true)
    const [price, setPrice] = useState<string>()
    const nftDrop = useContract(collections.address, "nft-drop").contract
    // const nftDrop = useNFTDrop(collections.address)
    //console.log(collections.address)
    // Auth
    const address = useAddress();
    const disconnect = useDisconnect();
    const connectWithMetamask = useMetamask();

    useEffect(() => {
        if (!nftDrop) return;
        const fetchPrice = async () => {
            const claimConditions = await nftDrop.claimConditions.getAll()
            setPrice(claimConditions?.[0].currencyMetadata.displayValue)
        }
        fetchPrice()
    }, [nftDrop])

    useEffect(() => {
        if (!nftDrop) return;
        const fetchNFTDropData = async () => {
            setLoading(true)
            const claimed = await nftDrop.getAllClaimed()
            const total = await nftDrop.totalSupply()
            setClaimedSupply(claimed.length)
            setTotalSupply(total)
            setLoading(false)
        }
        fetchNFTDropData()
    }, [nftDrop])

    const mintNFT = () => {
        if (!nftDrop || !address) return

        const quantity = 1; // how many unique NFT you want to claim

        setLoading(true)
        const notification = toast.loading('NFT Minting...', {
            style: {
                background: "#fff",
                color: 'green',
                fontWeight: 'bolder',
                fontSize: "15px",
                padding: "10px"
            }
        })

        nftDrop.claimTo(address, quantity).then(async (tx) => {
            const receipt = tx[0].receipt // the transaction receipt
            const claimedTokenId = tx[0].data // the id of the NFT claimed
            const claimedNFT = await tx[0].data // (optional) get the claimed NFT metadata

            toast('HAYEE... You Successfully Minted!', {
                duration: 8000,
                style: {
                    background: "green",
                    color: "#fff",
                    fontWeight: "bolder",
                    fontSize: "17px",
                    padding: "20px"
                }
            })

            console.log(receipt, "ðŸš€")
            console.log(claimedTokenId)
            console.log(claimedNFT)
        }).catch(err => {
            console.log(err)
            toast('Woops!... Something went wrong', {
                style: {
                    background: "red",
                    color: "#fff",
                    fontWeight: "bolder",
                    fontSize: "17px",
                    padding: "20px"
                }
            })
        }).finally(() => {
            setLoading(false)
            toast.dismiss(notification)
        })
    }

    //console.log(address);

    return (
        <div className='flex flex-col h-screen lg:grid lg:grid-cols-10'>
            <Head>
                <title>NFT DROP</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="" />
            </Head>
            <Toaster position="top-center" />

            {/* Left Side */}
            <div className='lg:col-span-4 bg-gradient-to-br from-cyan-800 to-rose-500'>
                <div className='flex flex-col items-center justify-center py-2 lg:min-h-screen'>
                    <div className='bg-gradient-to-br from-yellow-400 to-purple-600 p-2 rounded-xl'>
                        <img
                            className='w-44 rounded-xl object-cover lg:h-96 lg:w-72'
                            src={urlFor(collections.mainImage).url()}
                            alt="" />
                    </div>
                    <div className='space-y-2 text-center p-5'>
                        <h1 className='text-4xl fond-bold text-white'>{collections.nftCollectionName}</h1>
                        <h2 className='text-xl text-gray-300'>{collections.description}</h2>

                        <hr />

                        <h2 className='text-xl text-gray-300'>A non-fungible token is a financial security consisting of digital data stored in a blockchain, a form of distributed ledger. The ownership of an NFT is recorded in the blockchain, and can be transferred by the owner, allowing NFTs to be sold and traded.</h2>
                    </div>
                </div>
            </div>

            {/* Right Side */}
            <div className='flex flex-col flex-1 lg:col-span-6 p-12'>

                {/* Header */}
                <header className='items-center justify-between flex'>
                    <Link href={'/'}>
                        <h1 className='w-52 cursor-pointer font-extralight text-xl sm:w-80'>THE {' '}
                            <span className='font-extrabold underline decoration-pink-600/50'>PLUTO</span>
                            {' '} NFT MARKET PLACE </h1>
                    </Link>
                    <button
                        onClick={() => (address ? disconnect() : connectWithMetamask())}
                        className='rounded-full bg-rose-400 px-4 py-2 text-sm font-bold text-white lg:px-5 lg:py-3 lg:text-base'>{address ? 'Sign Out' : 'Sign In'}</button>
                </header>

                <hr className='border my-2' />
                {address && (
                    <p className="text-center text-sm text-rose-400">
                        You`re logged in with wallet {address.substring(0, 5)}...
                        {address.substring(address.length - 5)}
                    </p>
                )}

                {/* Content */}
                <div className='mt-10 flex flex-1 flex-col items-center text-center space-y-6 lg:space-y-0 lg:justify-center'>
                    <img
                        className='w-80 object-cover pb-10 lg:h-40'
                        src={urlFor(collections.previewImage).url()}
                        alt="" />
                    <h1
                        className="text-3xl font-bold lg:text-5xl lg:font-extrabold"
                    >
                        Discover and collect extraordinary NFTs
                    </h1>

                    {loading ? (
                        <p className="animate-bounce pt-2 text-xl text-green-500">Loading Supply Count...</p>
                    ) : (
                        <p className="pt-2 text-xl text-green-500">{claimedSupply}/ {totalSupply?.toString()} NFT's Claimed</p>
                    )}
                    {loading && (
                        <img className="h-50 w-80 object-contain" src="https://miro.medium.com/max/1838/1*CsJ05WEGfunYMLGfsT2sXA.gif" alt="" />
                    )}

                </div>

                {/* Mint Button */}
                <button
                    onClick={mintNFT}
                    disabled={loading || claimedSupply === totalSupply?.toNumber() || !address}
                    className='text-white bg-red-500 h-16 w-full rounded-full mt-10 font-bold disabled:bg-gray-400'>
                    {loading ? (
                        <>Loading</>
                    ) : claimedSupply === totalSupply?.toNumber() ? (
                        <>SOLD OUT</>
                    ) : !address ? (
                        <>Sign in to Mint</>
                    ) : (
                        <span className="font-bold">Mint NFT ({price} TBNB)</span>
                    )}
                </button>

            </div>
        </div >
    )
}

export default searching

export const getServerSideProps: GetServerSideProps = async ({ params }) => {
    const query = `*[_type == "collection" && slug.current == $id][0] {
        _id,
        title,
        address,
        description,
        nftCollectionName,
        mainImage{
            asset
        },
        previewImage{
            asset
        },
        slug {
            current
        },
        creator-> {
            _id,
            name,
            address,
            slug {
                current
            },
        }
    }`;
    const collections = await sanityClient.fetch(query, {
        id: params?.id
    });

    if (!collections) {
        return {
            notFound: true
        }
    }
    return {
        props: {
            collections,
        },
    }
}
